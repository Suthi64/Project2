import math
import random

#These are the global variable so they are constant variable whose value
#will never change throughout the execution of the program.
MIN_LAT = -90
MAX_LAT = 90
MIN_LONG = -180
MAX_LONG = 180
EARTH_RADIUS = 6371
RESTRICTION_ZONE_LAT = 25
RESTRICTION_ZONE_LONG = -71

def meter_to_feet(meter):
    """
    Takes a positive float number corresponding to a measure in meter and 
    returns that amount converted to feet

        Parameters:
            meter : A number (int or float)
        Returns:
            feet (float): The computed conversion of meter to feet
        
        Examples:
        >>>meter_to_feet(1.5)
        4.92
        >>>meter_to_feet(2.55)
        8.36
        >>>meter_to_feet(100)
        328.0
    """
    feet = round(((meter) * 3.28), 2)
    return feet

def degrees_to_radians(degrees):
    """
    Takes a positive float number corresponding to a angle in degrees and 
    returns its corresponding value in radians rounded to 2 decimals

        Parameters:
            degrees : A number (int or float)
        Returns:
            radians (float): The computed conversion of degrees to radians
        
        Examples:
        >>>degrees_to_radians(75)
        1.31
        >>>degrees_to_radians(64)
        1.12
        >>>degrees_to_radians(88)
        1.54
    """
    radians = round((degrees * math.pi / MAX_LONG), 2)
    return radians

def get_vessel_dimensions():
    """
    Ask the user the vessel length and  vessel width (in meter) and the
    function will return both length and width values converted to feet

        Parameters:
            none
        Returns:
            vessel_length (float): The computed conversion of the 
            vessel_length from meter to feet
            vessel_width (float): The computed conversion of the 
            vessel_width from meter to feet
        
        Examples:
        >>>get_vessel_dimensions()
        Enter the vessel length (in meter): 10
        Enter the vessel width (in meter): 6
        (32.8, 19.68)
        >>>get_vessel_dimensions()
        Enter the vessel length (in meter): 15
        Enter the vessel width (in meter): 9
        (49.2, 29.52)
        >>>get_vessel_dimensions()
        Enter the vessel length (in meter): 31.5
        Enter the vessel width (in meter): 7.5
        (103.32, 24.6)
    """
    vessel_length = meter_to_feet(float(input("Enter the vessel length \
(in meter): ")))
    vessel_width = meter_to_feet(float(input("Enter the vessel width \
(in meter): ")))
    return vessel_length, vessel_width

def get_valid_coordinate(val_name, min_float, max_float):
    """
    Ask the user for a float value and as long as the value is not within the
    ]min float, max float[ interval it will keep asking the user for a value.
    It returns the computed float of the val name once its valid.

        Parameters:
            val_name (string)
            min_float : A float number (int or float)
            max_float : A float number (int or float)
        Returns:
            value_val_name (float): The valid number corresponding 
            to the val_name
        
        Examples:
        >>>get_valid_coordinate("latitude", -90, 90)
        What is your latitude ?-100
        Invalid latitude
        What is your latitude ?-87.6
        -87.6
        >>>get_valid_coordinate("longitude", -180, 180)
        What is your longitude ?95
        95.0
        >>>get_valid_coordinate("y-coordinate", -10, 10)
        What is your longitude ?6
        6.0
    """
#The message displayed to the user is adapted depending on the value on the
#input string val name.
    value_val_name = float(input("What is your "+ val_name + " ?"))
    while min_float >= value_val_name or value_val_name >= max_float:
        print("Invalid", val_name)
        value_val_name = float(input("What is your "+ val_name + " ?"))
    return value_val_name

def get_gps_location():
    """
    The function will call the previous function get valid coordinate to get
    the latitude and longitude values of the vessel
        
        Parameters:
            none
        Returns:
            latitude_coordinate (float): The valid latitude 
            longitude_coordinate (float): The valid longitude
        
        Examples:
        >>>get_gps_location()
        What is your latitude ?-100
        Invalid latitude
        What is your latitude ?50
        What is your longitude ?0
        (50.0, 0.0)
        >>>get_gps_location()
        What is your latitude ?75
        What is your longitude ?65
        (75.0, 65.0)
        >>>get_gps_location()
        What is your latitude ?-150
        Invalid latitude
        What is your latitude ?30
        What is your longitude ?9
        (30.0, 9.0)
    """
    latitude_coordinate = get_valid_coordinate("latitude", MIN_LAT, MAX_LAT)
    longitude_coordinate = get_valid_coordinate \
    ("longitude", MIN_LONG, MAX_LONG)
    return latitude_coordinate, longitude_coordinate

def distance_two_points(latitude_1, longitude_1, latitude_2, longitude_2):
    """
    Computes the distance between the locations based on the Haversine 
    formula. This formula ”determines the great-circle distance between two
    points on a sphere given their longitudes and latitudes”

        Parameters:
            latitude_1 : A number (int or float)
            longitude_1 : A number (int or float)
            latitude_2 : A number (int or float)
            longitude_2 : A number (int or float)
        Returns:
            distance (float): The computed distance between the locations 
            based on the Haversine formula
        
        Examples:
        >>>distance_two_points(45.508888, -73.561668, 19.432608, -99.133209)
        3719.22
        >>>distance_two_points(25.0, 75.0, 45.0, 82.0)
        2313.44
        >>>distance_two_points(62.0, 89.0, 32.0, 105.0)
        3507.18
    """
    latitude_1_radians = degrees_to_radians(latitude_1)
    longitude_1_radians = degrees_to_radians(longitude_1)
    latitude_2_radians = degrees_to_radians(latitude_2)
    longitude_2_radians = degrees_to_radians(longitude_2)
    difference_btw_latitude = latitude_1_radians - latitude_2_radians
    difference_btw_longitude = longitude_1_radians - longitude_2_radians
    
    part1 = (math.sin(difference_btw_latitude / 2)) ** 2
    part2 = (math.sin(difference_btw_longitude/2)) ** 2
    part3 = math.cos(latitude_1_radians)
    part4 = math.cos(latitude_2_radians)
    part5 = part1 + part3 * part4 * part2
    part6 = 2 * math.atan2(math.sqrt(part5), math.sqrt(1 - part5))

    distance = round((EARTH_RADIUS * part6), 2)
    return distance

def check_safety(latitude_coordinate, longitude_coordinate):
    """
    Check the safety of the vessel's location knowing 
    its latitude and longitude
       
        Parameters:
            latitude_coordinate : A number (int or float)
            longitude_coordinate : A number (int or float)
        Returns:
            none
        
        Examples:
        >>>check_safety(21804132, -72.305832)
        Error: Restriciton zone!
        >>>check_safety(40.5, -70.5)
        Warning: Hazardous area! Navigate with caution.
        >>>check_safety(38.0, 64.0)
        Safe navigation.
    """
#Compute the distance between the imputed latitude,longitude and 
#the restriction zone longitude, latitude using the the Haversine formula 
#from the function distance_two_points.
    distance_btw_two_points = distance_two_points(RESTRICTION_ZONE_LAT, \
    RESTRICTION_ZONE_LONG, latitude_coordinate, longitude_coordinate)

#If the the distance between the current vessel’s location is close to a 
#restricted zone at 25° in latitude and -71° in longitude (their distance is
#less than or equal to 400 km) then 
#the function will print ”Error: Restricted zone!”.
    if distance_btw_two_points <= 400:
        print("Error: Restricted zone!")
#If the input latitude value is between 40 and 41° and the longitude is 
#between -71 and -70° (including these values), then 
#the function will print ”Warning: Hazardous area! Navigate #with caution.”
    elif 40 <= latitude_coordinate <= 41 and \
    -70 >= longitude_coordinate >= -71:
        print("Warning: Hazardous area! Navigate with caution.")
    else:
        print("Safe navigation.")

def get_max_capacity(vessel_length, vessel_width):
    """
    Returns the maximum number of adults with an average weight of 150 pounds
    the vessel can have 
       
        Parameters:
            vessel_length : a number (int or float) 
            vessel_width : a number (int or float)
        Returns:
            vessel_capacity (int): The computed maximum number of adults that
            the vessel can have  
        
        Examples:
        >>>get_max_capacity(18, 6)
        7        
        >>>get_max_capacity(2, 6)
        0   
        >>>get_max_capacity(28, 9)
        22   
    """
    if vessel_length <= 26:
        vessel_capacity = vessel_length * vessel_width / 15
    elif vessel_length > 26:
        part1 = vessel_length * vessel_width / 15
        part2 = (vessel_length - 26) * 3
        vessel_capacity = part1 + part2
#The function returns the vessel’s capacity an integer
#(by cutting off the decimals) meaning the maximum 
#number of passengers on the vessel
    return int(vessel_capacity)

def passengers_on_boat(vessel_length, vessel_width, vessel_passenger):
    """
    Returns a Boolean (True or False) indicating whether we can fit all the
    passengers on the boat or not  
       
        Parameters:
            vessel_length : a number (int or float) 
            vessel_width : a number (int or float)
            vessel_passenger : a number (int)
        Returns:
            a Boolean (True or False) indicating whether we can fit all the
            passengers on the boat or not 
        
        Examples:
        >>>passengers_on_boat(18, 6, 6)
        False        
        >>>passengers_on_boat(18, 6, 4)
        True   
        >>>passengers_on_boat(28, 9, 8)
        True
    """
#If the passenger on boat is greather than the maximum capacity of the vessel
#then it returns false.
    if(get_max_capacity(vessel_length, vessel_width) < vessel_passenger):
        return False
#If the passenger on boat is less or equal than the maximum capacity of the 
#vessel but the number of passenger could not be distributed equally accross 
#the 4 corners of the vessel then it returns false.
    elif(vessel_passenger%4 != 0):
        return False
#If the passenger on boat is less or equal than the maximum capacity of the
#vessel and also the number of passenger could  be distributed equally 
#accross the 4 corners of the vessel then it returns True.
    elif(vessel_passenger%4 == 0):
        return True    

def update_coordinate(initial_position, min_float, max_float):
    """
     Returns the new valid position, which is within the 
     ]min float, max float[ interval, rounded to 2 decimals
       
        Parameters:
            initial_position : a number (int or float) 
            min_float : a number (int or float)
            max_float : a number (int or float)
        Returns:
            new_valid_position (float): The valid computed sum of the 
            initial_position and the random number
        
        Examples:
        >>>update_coordinate(45.508888, -90, 90)
        37.66        
        >>>update_coordinate(56.0, -180, 180)
        47.05   
        >>>update_coordinate(18.0, -90, 90)
        9.05
    """
#Fix the seed number to 123 in order to pass the autograder tests since if you
#fix the seed number to 123 then 
#the function will return the same values for the same inputs.  
    random.seed(123)
#Generate a random number between -10 and 10 and since we were only allowed to
# use random(), we are using a formula to generate a random between -10 and 10
#which consist of generating a random float between 0 and 1 
#(since that is what random() does) and multiplying this by 20 and 
#adding that with -10 so that we cover any float from -10 to 10.
    random_number = -10 + 20 * random.random()
    new_valid_position = initial_position + random_number 

#Check if the new value remain within the ]min float, max float[ interval
#and if yes return the new valid position rounded to 2 decimals.
    if min_float < new_valid_position < max_float:
        return round(new_valid_position, 2)
#Otherwise the function continues to select a new random number and 
#validate again if it is within the interval.
    else:
        update_coordinate(initial_position, min_float, max_float)

def wave_hit_vessel(latitude_coordinate, longitude_coordinate):
    """
    Returns the new computed latitude and longitude coordinates
       
        Parameters:
            latitude_coordinate : a number (int or float) 
            longitude_coordinate : a number (int or float)
        Returns:
            new_latitude_coordinate (float) : The valid computed sum of the 
            latitude_coordinate and the random number
            new_longitude_coordinate (float): The valid computed sum of the
            longitude_coordinate and the random number
        
        Examples:
        >>>wave_hit_vessel(45.508888, -73.561668)
        Safe navigation.
        (36.56, -82.51)        
        >>>wave_hit_vessel(56.0, 84.0)
        Safe navigation.
        (47.05, 75.05)   
        >>>wave_hit_vessel(18.0, 55.0)
        Safe navigation.
        (9.05, 46.05)
    """

    new_latitude_coordinate = update_coordinate(latitude_coordinate, \
    MIN_LAT, MAX_LAT)
    new_longitude_coordinate = update_coordinate(longitude_coordinate, \
    MIN_LONG, MAX_LONG)
    check_safety(new_latitude_coordinate, new_longitude_coordinate)
    return new_latitude_coordinate, new_longitude_coordinate

def menu_message():
    """
    Return the option selected in the menu

        Parameters:
            none
        Returns:
            menu_option (string) : The option selected on the menu
        
        Examples:
        >>>menu_message()
        Please select an option below:
        1. Check the safety of your boat
        2. Check the maximum number of people that can fit on the boat
        3. Update the position of your boat
        4. Exit boat menu
        Your selection: 1
        1
        >>>menu_message()
        Please select an option below:
        1. Check the safety of your boat
        2. Check the maximum number of people that can fit on the boat
        3. Update the position of your boat
        4. Exit boat menu
        Your selection: 2
        2
        >>>menu_message()
        Please select an option below:
        1. Check the safety of your boat
        2. Check the maximum number of people that can fit on the boat
        3. Update the position of your boat
        4. Exit boat menu
        Your selection: 3
        3
    """
    print("Please select an option below: ")    
    print("1. Check the safety of your boat")
    print("2. Check the maximum number of people that can fit on the boat")
    print("3. Update the position of your boat")
    print("4. Exit boat menu")
    menu_option = input("Your selection: ")
    return menu_option

def vessel_menu():
    """ 
    The function will display a menu to the user to pick betwee 4 choice :
    1. Check the safety of your boat: In that case, the corresponding function 
    will be called in order to check how safe is the current location. 
    vessel menu will display again the menu to let the user make other choices
    2. Check the maximum number of people that can fit on the boat : 
    If the user choses this option, vessel menu will ask them the number of 
    adults to go on the boat and will inform the user wether it is possible 
    to hold that number on the boat or not. 
    vessel menu will display again the menu to let the user make other choices
    3. Update the position of your boat: The function will call 
    wave hit vessel and display the new position of the boat. 
    vessel menu will display again the menu to let the user make other choices
    4. Exit boat menu : As long as the user did not pick this number, 
    the same menu will be displayed again until this value is chosen. 
       
       Parameters:
            none
        Returns:
            none
    """
    print("Welcome to the boat menu!")
#Get the vessel’s location and dimensions
    latitude_coordinate, longitude_coordinate = get_gps_location()
    print("Your current position is at latitude", latitude_coordinate, \
    "and longitude", longitude_coordinate)
    vessel_length, vessel_width =  get_vessel_dimensions()
    print("Your boat measures", vessel_length,"feet by", vessel_width, \
    "feet")
    menu_option = menu_message()

#As long as the user did not pick the option 4, the same menu will be
#displayed again until the option 4 is chosen.
    while menu_option != "4":
        if menu_option == "1":
            check_safety(latitude_coordinate, longitude_coordinate)  
        elif menu_option == "2":
            vessel_passenger = int(input("How many adults go on the boat? "))
#Verify if we can fit all the passengers on the boat.  
            fitable_on_boat = passengers_on_boat(vessel_length,\
            vessel_width, vessel_passenger)
            if fitable_on_boat == True:
                print("Your boat can hold", vessel_passenger,"adults")
            else:
                print("Your boat cannot hold", vessel_passenger,"adults")
        elif menu_option == "3":
            new_latitude_coordinate, new_longitude_coordinate = \
            wave_hit_vessel(latitude_coordinate, longitude_coordinate)
            print("Your new position is latitude of", \
            new_latitude_coordinate,"and longitude of", \
            new_longitude_coordinate)
            latitude_coordinate, longitude_coordinate = \
            new_latitude_coordinate, new_longitude_coordinate
        menu_option = menu_message()
    print("End of boat menu.")